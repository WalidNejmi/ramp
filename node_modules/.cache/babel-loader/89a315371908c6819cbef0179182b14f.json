{"ast":null,"code":"var _jsxFileName = \"/Users/walid/Desktop/Career/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    fetchAll: fetchPaginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    fetchById: fetchTransactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  const transactions = useMemo(() => selectedEmployeeId ? transactionsByEmployee : paginatedTransactions, [selectedEmployeeId, transactionsByEmployee, paginatedTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await fetchPaginatedTransactions(0);\n    setIsLoading(false);\n  }, [employeeUtils, fetchPaginatedTransactions, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setSelectedEmployeeId(employeeId);\n    await fetchTransactionsByEmployee(employeeId);\n  }, [fetchTransactionsByEmployee]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            setSelectedEmployeeId(null);\n            await loadAllTransactions();\n          } else {\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), !selectedEmployeeId && transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            var _paginatedTransaction;\n\n            const nextPage = ((_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0) + 1;\n            await fetchPaginatedTransactions(nextPage);\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RpAWRKVor5r5KYPzpNv/jXetH5w=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","fetchAll","fetchPaginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","fetchById","fetchTransactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","selectedEmployeeId","setSelectedEmployeeId","transactions","loadAllTransactions","invalidateData","loadTransactionsByEmployee","employeeId","loading","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/walid/Desktop/Career/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, fetchAll: fetchPaginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, fetchById: fetchTransactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null);\n\n  const transactions = useMemo(\n    () => selectedEmployeeId ? transactionsByEmployee : paginatedTransactions,\n    [selectedEmployeeId, transactionsByEmployee, paginatedTransactions]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    await fetchPaginatedTransactions(0);\n\n    setIsLoading(false);\n  }, [employeeUtils, fetchPaginatedTransactions, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setSelectedEmployeeId(employeeId);\n      await fetchTransactionsByEmployee(employeeId);\n    },\n    [fetchTransactionsByEmployee]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              setSelectedEmployeeId(null);\n              await loadAllTransactions();\n            } else {\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {!selectedEmployeeId && transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                const nextPage = (paginatedTransactions?.nextPage ?? 0) + 1;\n                await fetchPaginatedTransactions(nextPage);\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}