{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n\n    // Determine the current page to fetch. If no data, start at page 0.\n    const currentPage = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0; // Fetch the data from the API\n\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: currentPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (previousResponse === null) {\n        // If there was no previous response, return the new response directly.\n        return response;\n      }\n\n      if (response === null) {\n        return previousResponse;\n      } // Append the new data to the existing data\n\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(usePaginatedTransactions, \"5C7xQHueO9nKLl+7c12EAAA+DoA=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","fetchAll","currentPage","nextPage","response","page","previousResponse","data","invalidateData"],"sources":["/Users/walid/Desktop/Career/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    // Determine the current page to fetch. If no data, start at page 0.\n    const currentPage = paginatedTransactions?.nextPage ?? 0;\n    \n    // Fetch the data from the API\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      { page: currentPage }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (previousResponse === null) {\n        // If there was no previous response, return the new response directly.\n        return response;\n      }\n\n      if (response === null) {\n        return previousResponse;\n      }\n\n      // Append the new data to the existing data\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions]);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n  }, []);\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EAEA,MAAMO,QAAQ,GAAGR,WAAW,CAAC,YAAY;IAAA;;IACvC;IACA,MAAMS,WAAW,4BAAGH,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEI,QAA1B,yEAAsC,CAAvD,CAFuC,CAIvC;;IACA,MAAMC,QAAQ,GAAG,MAAMP,cAAc,CACnC,uBADmC,EAEnC;MAAEQ,IAAI,EAAEH;IAAR,CAFmC,CAArC;IAKAF,wBAAwB,CAAEM,gBAAD,IAAsB;MAC7C,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B;QACA,OAAOF,QAAP;MACD;;MAED,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP;MACD,CAR4C,CAU7C;;;MACA,OAAO;QACLC,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CADD;QAELJ,QAAQ,EAAEC,QAAQ,CAACD;MAFd,CAAP;IAID,CAfuB,CAAxB;EAgBD,CA1B2B,EA0BzB,CAACN,cAAD,EAAiBE,qBAAjB,CA1ByB,CAA5B;EA4BA,MAAMS,cAAc,GAAGf,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEO,IAAI,EAAER,qBAAR;IAA+BD,OAA/B;IAAwCG,QAAxC;IAAkDO;EAAlD,CAAP;AACD;;GArCeZ,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}