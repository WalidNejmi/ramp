{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  var _paginatedTransaction2;\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [filterParams, setFilterParams] = useState(null);\n  const fetchAll = useCallback(async () => {\n    var _paginatedTransaction;\n\n    const currentPage = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : 0; // Make sure to include filter parameters in the request\n\n    const response = await fetchWithCache(\"paginatedTransactions\", { ...filterParams,\n      page: currentPage\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (previousResponse === null) {\n        return response;\n      }\n\n      if (response === null) {\n        return previousResponse;\n      } // Append new data to existing data\n\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions, filterParams]);\n  const setFilter = useCallback(newFilterParams => {\n    // Update filter parameters and reset pagination\n    setFilterParams(newFilterParams);\n    setPaginatedTransactions(null); // Reset transactions to start fresh with new filters\n  }, []);\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setFilterParams(null); // Optionally clear filters\n  }, []);\n  return {\n    data: (_paginatedTransaction2 = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction2 !== void 0 ? _paginatedTransaction2 : [],\n    // Ensure data is always an array\n    loading,\n    fetchAll,\n    invalidateData,\n    setFilter\n  };\n}\n\n_s(usePaginatedTransactions, \"uhNjeCEdBrCjwnfNCHCu5WCYEW0=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","filterParams","setFilterParams","fetchAll","currentPage","nextPage","response","page","previousResponse","data","setFilter","newFilterParams","invalidateData"],"sources":["/Users/walid/Desktop/Career/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\";\nimport { PaginatedTransactionsResult } from \"./types\";\nimport { useCustomFetch } from \"./useCustomFetch\";\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<Transaction[]> | null>(null);\n  const [filterParams, setFilterParams] = useState<PaginatedRequestParams | null>(null);\n\n  const fetchAll = useCallback(async () => {\n    const currentPage = paginatedTransactions?.nextPage ?? 0;\n\n    // Make sure to include filter parameters in the request\n    const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n      \"paginatedTransactions\",\n      { ...filterParams, page: currentPage }\n    );\n\n    setPaginatedTransactions((previousResponse) => {\n      if (previousResponse === null) {\n        return response;\n      }\n\n      if (response === null) {\n        return previousResponse;\n      }\n      \n      // Append new data to existing data\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage,\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions, filterParams]);\n\n  const setFilter = useCallback((newFilterParams: PaginatedRequestParams) => {\n    // Update filter parameters and reset pagination\n    setFilterParams(newFilterParams);\n    setPaginatedTransactions(null); // Reset transactions to start fresh with new filters\n  }, []);\n\n  const invalidateData = useCallback(() => {\n    setPaginatedTransactions(null);\n    setFilterParams(null); // Optionally clear filters\n  }, []);\n\n  return { \n    data: paginatedTransactions?.data ?? [], // Ensure data is always an array\n    loading, \n    fetchAll, \n    invalidateData, \n    setFilter \n  };\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAA0C,IAA1C,CAAlE;EACA,MAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAgC,IAAhC,CAAhD;EAEA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IAAA;;IACvC,MAAMW,WAAW,4BAAGL,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEM,QAA1B,yEAAsC,CAAvD,CADuC,CAGvC;;IACA,MAAMC,QAAQ,GAAG,MAAMT,cAAc,CACnC,uBADmC,EAEnC,EAAE,GAAGI,YAAL;MAAmBM,IAAI,EAAEH;IAAzB,CAFmC,CAArC;IAKAJ,wBAAwB,CAAEQ,gBAAD,IAAsB;MAC7C,IAAIA,gBAAgB,KAAK,IAAzB,EAA+B;QAC7B,OAAOF,QAAP;MACD;;MAED,IAAIA,QAAQ,KAAK,IAAjB,EAAuB;QACrB,OAAOE,gBAAP;MACD,CAP4C,CAS7C;;;MACA,OAAO;QACLC,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGH,QAAQ,CAACG,IAAvC,CADD;QAELJ,QAAQ,EAAEC,QAAQ,CAACD;MAFd,CAAP;IAID,CAduB,CAAxB;EAeD,CAxB2B,EAwBzB,CAACR,cAAD,EAAiBE,qBAAjB,EAAwCE,YAAxC,CAxByB,CAA5B;EA0BA,MAAMS,SAAS,GAAGjB,WAAW,CAAEkB,eAAD,IAA6C;IACzE;IACAT,eAAe,CAACS,eAAD,CAAf;IACAX,wBAAwB,CAAC,IAAD,CAAxB,CAHyE,CAGzC;EACjC,CAJ4B,EAI1B,EAJ0B,CAA7B;EAMA,MAAMY,cAAc,GAAGnB,WAAW,CAAC,MAAM;IACvCO,wBAAwB,CAAC,IAAD,CAAxB;IACAE,eAAe,CAAC,IAAD,CAAf,CAFuC,CAEhB;EACxB,CAHiC,EAG/B,EAH+B,CAAlC;EAKA,OAAO;IACLO,IAAI,4BAAEV,qBAAF,aAAEA,qBAAF,uBAAEA,qBAAqB,CAAEU,IAAzB,2EAAiC,EADhC;IACoC;IACzCX,OAFK;IAGLK,QAHK;IAILS,cAJK;IAKLF;EALK,CAAP;AAOD;;GAjDed,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}